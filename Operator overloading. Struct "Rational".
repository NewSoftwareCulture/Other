#include <iostream>

using namespace std;

struct Rational {
    Rational(int numerator = 0, int denominator = 1) : numerator_(numerator), denominator_(denominator) {};

    void add(Rational rational) {
        numerator_ = numerator_ * rational.denominator_ + rational.numerator_ * denominator_;
        denominator_ *= rational.denominator_;
    }

    void sub(Rational rational) {
        numerator_ = numerator_ * rational.denominator_ - rational.numerator_ * denominator_;
        denominator_ *= rational.denominator_;
    }

    void mul(Rational rational) {
        numerator_ *= rational.numerator_;
        denominator_ *= rational.denominator_;
    }

    void div(Rational rational) {
        numerator_ *= rational.denominator_;
        denominator_ *= rational.numerator_;
    }

    void neg() {
        numerator_ = -numerator_;
    }

    void inv() {}

    Rational & operator+=(Rational const &r)
    {
        this->add(r);
        return *this;
    }
    Rational & operator-=(Rational const &r)
    {
        this->sub(r);
        return *this;
    }
    Rational & operator*=(Rational const &r)
    {
        this->mul(r);
        return *this;
    }
    Rational & operator/=(Rational const &r)
    {
        this->div(r);
        return *this;
    }
    Rational operator-() const
    {
        Rational temp(this->numerator_, this->denominator_);
        temp.neg();
        return temp;
    }
    Rational operator+() const
    {
        Rational temp(this->numerator_, this->denominator_);
        return temp;
    }
    operator double() const
    {
        return numerator_ / (double)denominator_;
    }

private:
    int numerator_;
    int denominator_;
};

Rational operator+(Rational r1, Rational const& r2)
{
    return r1 += r2;
}
Rational operator-(Rational r1, Rational const& r2)
{
    return r1 -= r2;
}
Rational operator*(Rational r1, Rational const& r2)
{
    return r1 *= r2;
}
Rational operator/(Rational r1, Rational const& r2)
{
    return r1 /= r2;
}
bool operator==(Rational const& r1, Rational const& r2)
{
    int* num1 = (int *) &r1;
    int* num2 = (int *) &r2;
    cout << (*num1) << ' ' << *(num1+1) << endl;
    cout << (*num2) << ' ' << *(num2+1) << endl;
    double n1 = *num1;
    double n2 = *(num1 + 1);
    double n3 = *num2;
    double n4 = *(num2 + 1);
    return n1 / n2 == n3 / n4;
}
bool operator<(Rational const& r1, Rational const& r2)
{
    int* num1 = (int *)&r1;
    int* num2 = (int *)&r2;
    cout << (*num1) << ' ' << *(num1 + 1) << endl;
    cout << (*num2) << ' ' << *(num2 + 1) << endl;
    double n1 = *num1;
    double n2 = *(num1 + 1);
    double n3 = *num2;
    double n4 = *(num2 + 1);
    return n1 / n2 < n3 / n4;
}
bool operator!=(Rational const& r1, Rational const& r2)
{
    return !(r1 == r2);
}
bool operator>(Rational const& r1, Rational const& r2)
{
    return !(r1 == r2) && !(r1 < r2);
}
bool operator>=(Rational const& r1, Rational const& r2)
{
    return (r1 == r2) || (r1 > r2);
}
bool operator<=(Rational const& r1, Rational const& r2)
{
    return (r1 == r2) || (r1 < r2);
}


int main() {
   
}
